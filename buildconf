#!/bin/sh

die()

{
	echo "buildconf: $@"
	exit 1
}


#--------------------------------------------------------------------------
# findtool works as 'which' but we use a different name to make it more
# obvious we aren't using 'which'! ;-)
#

findtool()

{
	file="$1"

	if { echo "$file" | grep "/" >/dev/null 2>&1; } then
	# when file is given with a path check it first
		if test -f "$file"
		then	echo "$file"
			return
		fi
	fi

	old_IFS=$IFS
	IFS=':'

	for path in $PATH
	do	IFS=$old_IFS

		if [ "$path" != "." ]
		then	# echo "checks for $file in $path" >&2
			if test -f "$path/$file"
			then	echo "$path/$file"
				return
			fi
		fi
	done

	IFS=$old_IFS
}


#--------------------------------------------------------------------------
# removethis() removes all files and subdirectories with the given name,
# inside and below the current subdirectory at invocation time.
#

removethis()

{
	if test "$#" = "1"
	then	find . -depth -name $1 -print > buildconf.tmp.$$

		while read fdname
		do	if test -f "$fdname"
			then	rm -f "$fdname"
			elif test -d "$fdname"
			then	rm -f -r "$fdname"
			fi
		done < buildconf.tmp.$$

		rm -f buildconf.tmp.$$
	fi
}


#--------------------------------------------------------------------------
# Ensure that buildconf runs from the subdirectory where configure.ac lives
#

if test ! -f configure.ac
then	echo "Can not run buildconf from outside of top source subdirectory!"
	echo "Change to the subdirectory where buildconf is found, and retry."
	exit 1
fi


#--------------------------------------------------------------------------
# autoconf 2.57 or newer
#

need_autoconf="2.57"
ac_version=`${AUTOCONF:-autoconf} --version 2>/dev/null | head -n 1	|
	sed -e 's/^[^0-9]*//' -e 's/[a-z]* *$//'`

if test -z "$ac_version"
then	echo "buildconf: autoconf not found."
	echo "    You need autoconf version $need_autoconf or newer installed."
	exit 1
fi

old_IFS=$IFS
IFS='.'
set $ac_version
IFS=$old_IFS

if test "$1" = "2" -a "$2" -lt "57" || test "$1" -lt "2"
then	echo "buildconf: autoconf version $ac_version found."
	echo "    You need autoconf version $need_autoconf or newer installed."
	echo "    If you have a sufficient autoconf installed, but it"
	echo "    is not named 'autoconf', then try setting the"
	echo "    AUTOCONF environment variable."
	exit 1
fi

if test "$1" = "2" -a "$2" -eq "67"
then	echo "buildconf: autoconf version $ac_version (BAD)"
	echo "            Unpatched version generates broken configure script."
elif test "$1" = "2" -a "$2" -eq "68"
then	echo "buildconf: autoconf version $ac_version (BAD)"
	echo "            Unpatched version generates unusable configure script."
else
	echo "buildconf: autoconf version $ac_version (ok)"
fi

am4te_version=`${AUTOM4TE:-autom4te} --version 2>/dev/null | head -n 1 |
	sed -e 's/autom4te\(.*\)/\1/' -e 's/^[^0-9]*//' -e 's/[a-z]* *$//'`

if test -z "$am4te_version"
then	echo "buildconf: autom4te not found. Weird autoconf installation!"
	exit 1
fi

if test "$am4te_version" = "$ac_version"; then
	echo "buildconf: autom4te version $am4te_version (ok)"
else
	echo "buildconf: autom4te version $am4te_version"
	echo "    (ERROR: does not match autoconf version)"
	exit 1
fi


#--------------------------------------------------------------------------
# automake 1.7 or newer
#

need_automake="1.7"
am_version=`${AUTOMAKE:-automake} --version 2>/dev/null | head -n 1 |
    sed -e 's/^.* \([0-9]\)/\1/' -e 's/[a-z]* *$//' -e 's/\(.*\)\(-p.*\)/\1/'`

if test -z "$am_version"
then	echo "buildconf: automake not found."
	echo "    You need automake version $need_automake or newer installed."
	exit 1
fi

old_IFS=$IFS
IFS='.'
set $am_version
IFS=$old_IFS

if test "$1" = "1" -a "$2" -lt "7" || test "$1" -lt "1"
then	echo "buildconf: automake version $am_version found."
	echo "    You need automake version $need_automake or newer installed."
	echo "    If you have a sufficient automake installed, but it"
	echo "    is not named 'automake', then try setting the"
	echo "    AUTOMAKE environment variable."
	exit 1
fi

echo "buildconf: automake version $am_version (ok)"

acloc_version=`${ACLOCAL:-aclocal} --version 2>/dev/null | head -n 1 |
    sed -e 's/^.* \([0-9]\)/\1/' -e 's/[a-z]* *$//' -e 's/\(.*\)\(-p.*\)/\1/'`

if test -z "$acloc_version"
then	echo "buildconf: aclocal not found. Weird automake installation!"
	exit 1
fi

if test "$acloc_version" = "$am_version"
then	echo "buildconf: aclocal version $acloc_version (ok)"
else	echo "buildconf: aclocal version $acloc_version"
	echo "    (ERROR: does not match automake version)"
	exit 1
fi


#--------------------------------------------------------------------------
# m4 check
#

m4=`(${M4:-m4} --version || ${M4:-gm4} --version) 2>/dev/null | head -n 1`
m4_version=`echo $m4 | sed -e 's/^.* \([0-9]\)/\1/' -e 's/[a-z]* *$//'`

if { echo $m4 | grep "GNU" >/dev/null 2>&1; }
then	echo "buildconf: GNU m4 version $m4_version (ok)"
else	echo "buildconf: m4 version $m4 found. You need a GNU m4 installed!"
	exit 1
fi


#--------------------------------------------------------------------------
# perl check
#

PERL=`findtool ${PERL:-perl}`

if test -z "$PERL"
then	echo "buildconf: perl not found"
	exit 1
fi


#--------------------------------------------------------------------------
# Remove files generated on previous buildconf/configure run.
#

for fname in .deps							\
	.libs								\
	*.la								\
	*.lo								\
	*.a								\
	*.o								\
	Makefile							\
	Makefile.in							\
	aclocal.m4							\
	aclocal.m4.bak							\
	autom4te.cache							\
	config.guess							\
	config.log							\
	config.status							\
	config.sub							\
	configure							\
	depcomp
do
	  removethis "$fname"
done


#--------------------------------------------------------------------------
# run the correct scripts now
#

echo "buildconf: running aclocal"
${ACLOCAL:-aclocal} $ACLOCAL_FLAGS || die "aclocal command failed"

if test -n "$PERL"
then	echo "buildconf: running aclocal hack to convert all mv to mv -f"
	$PERL -i.bak -pe 's/\bmv +([^-\s])/mv -f $1/g' aclocal.m4
else	echo "buildconf: perl not found"
	exit 1
fi

echo "buildconf: running autoconf"
${AUTOCONF:-autoconf} || die "autoconf command failed"

echo "buildconf: running automake"
${AUTOMAKE:-automake} --add-missing --copy || die "automake command failed"


#--------------------------------------------------------------------------
# Finished successfully.
#

echo "buildconf: OK"
exit 0
